// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: image.sql

package db

import (
	"context"
)

const createImage = `-- name: CreateImage :one
INSERT INTO images (
    user_id,
    image_path,
    image_url
) VALUES ($1, $2, $3) RETURNING id, user_id, image_path, image_url
`

type CreateImageParams struct {
	UserID    int64  `json:"user_id"`
	ImagePath string `json:"image_path"`
	ImageUrl  string `json:"image_url"`
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (Image, error) {
	row := q.db.QueryRowContext(ctx, createImage, arg.UserID, arg.ImagePath, arg.ImageUrl)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ImagePath,
		&i.ImageUrl,
	)
	return i, err
}

const getImages = `-- name: GetImages :many
SELECT id, user_id, image_path, image_url FROM images
WHERE user_id = $1
`

func (q *Queries) GetImages(ctx context.Context, userID int64) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, getImages, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Image{}
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ImagePath,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
